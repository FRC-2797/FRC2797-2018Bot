// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2797.KnightsFRC2018v2.subsystems;

import org.usfirst.frc2797.KnightsFRC2018v2.RobotMap;
import org.usfirst.frc2797.KnightsFRC2018v2.commands.TeleopDrive;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends Subsystem implements PIDOutput{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	private final double WheelCircumference = .5 * Math.PI;
	
	private final PIDController leftPID;
	private final PIDController rightPID;
	private final AHRS navX = RobotMap.navX;	
	private final PIDController gyroPID;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController frontLeft = RobotMap.drivetrainfrontLeft;
    private final SpeedController rearLeft = RobotMap.drivetrainrearLeft;
    private final SpeedControllerGroup left = RobotMap.drivetrainleft;
    private final SpeedController frontRight = RobotMap.drivetrainfrontRight;
    private final SpeedController rearRight = RobotMap.drivetrainrearRight;
    private final SpeedControllerGroup right = RobotMap.drivetrainright;
    private final DifferentialDrive drive = RobotMap.drivetrainDrive;
    private final Encoder leftEnc = RobotMap.drivetrainleftEnc;
    private final Encoder rightEnc = RobotMap.drivetrainrightEnc;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TeleopDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public Drivetrain() {
		leftPID = new PIDController(0.015, 0.0, 0.0, 0.0, leftEnc, this);
		leftPID.setAbsoluteTolerance(5.0);
		leftPID.setInputRange(Double.MIN_VALUE, Double.MAX_VALUE);
		leftPID.setOutputRange(-1.0, 1.0);
		leftPID.setContinuous(false);
		leftPID.enable();
		
		rightPID = new PIDController(0.015, 0.0, 0.0, 0.0, rightEnc, this);
		rightPID.setAbsoluteTolerance(5.0);
		rightPID.setInputRange(Double.MIN_VALUE, Double.MAX_VALUE);
		rightPID.setOutputRange(-1.0, 1.0);
		rightPID.setContinuous(false);
		rightPID.enable();
		
		gyroPID = new PIDController(0.015, 0.0, 0.0, navX, this);
		gyroPID.setAbsoluteTolerance(1.0);
		gyroPID.setInputRange(-360.0, 360.0);
		gyroPID.setOutputRange(-1.0, 1.0);
		gyroPID.setContinuous(false);
		gyroPID.enable();
		
		
	}
    
    public PIDController getGyroPID() {
    	return gyroPID;
    }
    
    public void resetEncoders() {
    	leftEnc.reset();
    	rightEnc.reset();
    }
    
    public void resetPID() {
    	leftPID.setSetpoint(0.0);
    	rightPID.setSetpoint(0.0);
    }
    
    public void enablePID() {
    	rightPID.enable();
    	leftPID.enable();
    }
    
    public void disablePID() {
    	rightPID.disable();
    	leftPID.disable();
    }
    
    public void driveRobot(double leftSpeed, double rightSpeed) {
		drive.tankDrive(leftSpeed * -1, rightSpeed * -1);
	}
    
    public void stop() {
		drive.tankDrive(0, 0);
		leftPID.disable();
	}
    
    public void driveDistance(double distance, double speed) {
    	double lSetpoint = leftPID.getSetpoint();
    	double rSetpoint = rightPID.getSetpoint();
    	
    	leftPID.setOutputRange(-speed, speed);
    	rightPID.setOutputRange(-speed, speed);
    	
		leftPID.setSetpoint(lSetpoint + (int)(distance * (360 / WheelCircumference)));
		rightPID.setSetpoint(rSetpoint + (int)(distance * (360 / WheelCircumference)));
	}
    
    
    public void turnToAngle(double angle, double speed) {
    	navX.reset();
    	gyroPID.setSetpoint(angle);

    	leftPID.setOutputRange(-speed, speed);
    	rightPID.setOutputRange(-speed, speed);
    	
    }
    
    public void moveToAngle() {
    	double angle = gyroPID.getSetpoint();
    	if(angle > 0) {
    		leftPID.setSetpoint(leftPID.getSetpoint() + 10);
    		rightPID.setSetpoint(rightPID.getSetpoint() - 10);
    	}
    	else {
    		leftPID.setSetpoint(leftPID.getSetpoint() - 10);
    		rightPID.setSetpoint(rightPID.getSetpoint() + 10);
    	}
    }
    
    
    
    
    
    public PIDController getPIDController(boolean isLeft) {
		
    	if(isLeft)
			return leftPID;
		else
			return rightPID;
	}
    
    public void pidWrite(double output) {
    	pidWrite(leftPID.get(), rightPID.get());
    }
    
    public void pidWrite(double outputL, double outputR) {
		drive.tankDrive(outputL, outputR);
	}
}

