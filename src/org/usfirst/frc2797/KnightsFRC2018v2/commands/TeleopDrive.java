// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2797.KnightsFRC2018v2.commands;
import java.util.concurrent.TimeUnit;

import org.usfirst.frc2797.KnightsFRC2018v2.Robot;

import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class TeleopDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TeleopDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	Robot.drivetrain.disablePID();
    	Robot.elevator.getPIDController().disable();
    	//notifyEnabled();
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	Robot.drivetrain.driveRobot(Robot.oi.xbox1.getRawAxis(1), Robot.oi.xbox1.getRawAxis(5));
    	Robot.elevator.moveElevator(Robot.oi.xbox1.getRawAxis(3) - Robot.oi.xbox1.getRawAxis(2));
    	Robot.oi.aButton.whenPressed(new FlipClaw());
    	Robot.oi.rBumperButton.whenPressed(new CloseClaw());
    	Robot.oi.lBumperButton.whenPressed(new OpenClaw());
    	Robot.oi.bButton.whenPressed(new ShiftPto());
    	Robot.oi.yButton.whenPressed(new toggleElevatorLock());
    	Robot.oi.rStickButton.whenActive(new ClawIntakeIn());
    	Robot.oi.lStickButton.whenActive(new ClawIntakeOut());
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
    
    private void notifyEnabled() {
    	Robot.oi.xbox1.setRumble(RumbleType.kRightRumble, 1.0);
    	try {
    		TimeUnit.SECONDS.sleep(1);
    	}catch(Exception e) {
    		e.printStackTrace();
    	}
    	Robot.oi.xbox1.setRumble(RumbleType.kRightRumble, 0.0);
    }
}
