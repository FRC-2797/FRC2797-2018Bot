// RobotBuilder Version: 2.0
//
//McCall
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2797.KnightsFRC2018v2;

import org.opencv.core.Mat;
import org.usfirst.frc2797.KnightsFRC2018v2.commands.BlockOnScale;
import org.usfirst.frc2797.KnightsFRC2018v2.commands.BlockOnScaleFirst;
import org.usfirst.frc2797.KnightsFRC2018v2.commands.DoNothing;
import org.usfirst.frc2797.KnightsFRC2018v2.commands.DriveDistance;
import org.usfirst.frc2797.KnightsFRC2018v2.commands.SwitchLeftData;
import org.usfirst.frc2797.KnightsFRC2018v2.commands.SwitchRightData;
import org.usfirst.frc2797.KnightsFRC2018v2.subsystems.Claw;
import org.usfirst.frc2797.KnightsFRC2018v2.subsystems.Drivetrain;
import org.usfirst.frc2797.KnightsFRC2018v2.subsystems.Elevator;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {

	Command autonomousCommand;
	SendableChooser<Command> chooser = new SendableChooser<>();

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Drivetrain drivetrain;
	public static Elevator elevator;
	public static Claw claw;
	public static String gameData = "RRR";

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	@Override
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		drivetrain = new Drivetrain();
		System.out.println("Init drivetrain");
		elevator = new Elevator();
		claw = new Claw();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// Add commands to Autonomous Sendable Chooser
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		chooser.addDefault("Cross Autonomous Line", new DriveDistance(12.0, 1.0));
		chooser.addObject("Do Nothing", new DoNothing());
		chooser.addObject("Switch Right Only", new SwitchRightData());
		chooser.addObject("Switch Left Only", new SwitchLeftData());
		chooser.addObject("Switch Or Scale, Right Only", new BlockOnScale());
		chooser.addObject("Scale First Or Switch, Right Only", new BlockOnScaleFirst());
		//chooser.addObject("Elevator Test", new TestAutonomous());
		SmartDashboard.putData("Auto mode", chooser);

		// CameraServer.getInstance().startAutomaticCapture();

		new Thread(() -> {
			UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
			camera.setResolution(320, 240);

			camera.setFPS(15);
			CvSink cvSink = CameraServer.getInstance().getVideo();
			CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 160, 120);

			Mat source = new Mat();
			Mat output = new Mat();

			while (!Thread.interrupted()) {
				cvSink.grabFrame(source);

				outputStream.putFrame(source);
			}
		}).start();
	}
	

	/**
	 * This function is called when the disabled button is hit. You can use it to
	 * reset subsystems before shutting down.
	 */
	@Override
	public void disabledInit() {

	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.updateValues();
	}

	@Override
	public void autonomousInit() {

		while (gameData == null) {
			gameData = DriverStation.getInstance().getGameSpecificMessage();
		}

		autonomousCommand = chooser.getSelected();
		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.updateValues();
	}

	public void testPeriodic() {
		LiveWindow.run();
	}
}
